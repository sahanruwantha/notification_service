version: '3.0'

services:
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 5

  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile.server
    command: celery -A app.utils.celery_app worker --loglevel=info
    environment:
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
      - PYTHONPATH=/app
    volumes:
      - .:/app
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy

  grpc_server:
    build:
      context: .
      dockerfile: Dockerfile.server
    command: python manage.py grpcrunaioserver
    ports:
      - "50051:50051"
    environment:
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      - DATABASE_URL=postgresql://user:password@postgres:5432/notifications
    volumes:
      - .:/app
    depends_on:
      celery_worker:
        condition: service_started
      postgres:
        condition: service_healthy

  envoy:
    image: envoyproxy/envoy:v1.28-latest
    ports:
      - "8080:8080"
      - "9901:9901"
    volumes:
      - ./envoy.yaml:/etc/envoy/envoy.yaml
    depends_on:
      - grpc_server

  postgres:
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=sahan
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=notifications
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sahan -d notifications"]
      interval: 10s
      timeout: 5s
      retries: 5

  notification-client:
    build:
      context: .
      dockerfile: Dockerfile.client
    ports:
      - "3000:3000"
    volumes:
      - ./notification-client:/app
      - /app/node_modules
    environment:
      - REACT_APP_GRPC_WEB_PROXY=http://localhost:8080
    depends_on:
      - envoy

volumes:
  postgres_data: