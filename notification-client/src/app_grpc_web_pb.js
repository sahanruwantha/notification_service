/**
 * @fileoverview gRPC-Web generated client stub for notification_service.app
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.12.4
// source: src/app.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js')
const proto = {};
proto.notification_service = {};
proto.notification_service.app = require('./app_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.notification_service.app.NotificationControllerClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.notification_service.app.NotificationControllerPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.notification_service.app.SendNotificationRequest,
 *   !proto.notification_service.app.NotificationResponse>}
 */
const methodDescriptor_NotificationController_Create = new grpc.web.MethodDescriptor(
  '/notification_service.app.NotificationController/Create',
  grpc.web.MethodType.UNARY,
  proto.notification_service.app.SendNotificationRequest,
  proto.notification_service.app.NotificationResponse,
  /**
   * @param {!proto.notification_service.app.SendNotificationRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.notification_service.app.NotificationResponse.deserializeBinary
);


/**
 * @param {!proto.notification_service.app.SendNotificationRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.notification_service.app.NotificationResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.notification_service.app.NotificationResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.notification_service.app.NotificationControllerClient.prototype.create =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/notification_service.app.NotificationController/Create',
      request,
      metadata || {},
      methodDescriptor_NotificationController_Create,
      callback);
};


/**
 * @param {!proto.notification_service.app.SendNotificationRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.notification_service.app.NotificationResponse>}
 *     Promise that resolves to the response
 */
proto.notification_service.app.NotificationControllerPromiseClient.prototype.create =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/notification_service.app.NotificationController/Create',
      request,
      metadata || {},
      methodDescriptor_NotificationController_Create);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.notification_service.app.NotificationDestroyRequest,
 *   !proto.google.protobuf.Empty>}
 */
const methodDescriptor_NotificationController_Destroy = new grpc.web.MethodDescriptor(
  '/notification_service.app.NotificationController/Destroy',
  grpc.web.MethodType.UNARY,
  proto.notification_service.app.NotificationDestroyRequest,
  google_protobuf_empty_pb.Empty,
  /**
   * @param {!proto.notification_service.app.NotificationDestroyRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  google_protobuf_empty_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.notification_service.app.NotificationDestroyRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.google.protobuf.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.notification_service.app.NotificationControllerClient.prototype.destroy =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/notification_service.app.NotificationController/Destroy',
      request,
      metadata || {},
      methodDescriptor_NotificationController_Destroy,
      callback);
};


/**
 * @param {!proto.notification_service.app.NotificationDestroyRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.google.protobuf.Empty>}
 *     Promise that resolves to the response
 */
proto.notification_service.app.NotificationControllerPromiseClient.prototype.destroy =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/notification_service.app.NotificationController/Destroy',
      request,
      metadata || {},
      methodDescriptor_NotificationController_Destroy);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.notification_service.app.GetUnreadNotificationsRequest,
 *   !proto.notification_service.app.NotificationListResponse>}
 */
const methodDescriptor_NotificationController_GetUnreadNotifications = new grpc.web.MethodDescriptor(
  '/notification_service.app.NotificationController/GetUnreadNotifications',
  grpc.web.MethodType.UNARY,
  proto.notification_service.app.GetUnreadNotificationsRequest,
  proto.notification_service.app.NotificationListResponse,
  /**
   * @param {!proto.notification_service.app.GetUnreadNotificationsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.notification_service.app.NotificationListResponse.deserializeBinary
);


/**
 * @param {!proto.notification_service.app.GetUnreadNotificationsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.notification_service.app.NotificationListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.notification_service.app.NotificationListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.notification_service.app.NotificationControllerClient.prototype.getUnreadNotifications =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/notification_service.app.NotificationController/GetUnreadNotifications',
      request,
      metadata || {},
      methodDescriptor_NotificationController_GetUnreadNotifications,
      callback);
};


/**
 * @param {!proto.notification_service.app.GetUnreadNotificationsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.notification_service.app.NotificationListResponse>}
 *     Promise that resolves to the response
 */
proto.notification_service.app.NotificationControllerPromiseClient.prototype.getUnreadNotifications =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/notification_service.app.NotificationController/GetUnreadNotifications',
      request,
      metadata || {},
      methodDescriptor_NotificationController_GetUnreadNotifications);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.notification_service.app.NotificationListRequest,
 *   !proto.notification_service.app.NotificationListResponse>}
 */
const methodDescriptor_NotificationController_List = new grpc.web.MethodDescriptor(
  '/notification_service.app.NotificationController/List',
  grpc.web.MethodType.UNARY,
  proto.notification_service.app.NotificationListRequest,
  proto.notification_service.app.NotificationListResponse,
  /**
   * @param {!proto.notification_service.app.NotificationListRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.notification_service.app.NotificationListResponse.deserializeBinary
);


/**
 * @param {!proto.notification_service.app.NotificationListRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.notification_service.app.NotificationListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.notification_service.app.NotificationListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.notification_service.app.NotificationControllerClient.prototype.list =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/notification_service.app.NotificationController/List',
      request,
      metadata || {},
      methodDescriptor_NotificationController_List,
      callback);
};


/**
 * @param {!proto.notification_service.app.NotificationListRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.notification_service.app.NotificationListResponse>}
 *     Promise that resolves to the response
 */
proto.notification_service.app.NotificationControllerPromiseClient.prototype.list =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/notification_service.app.NotificationController/List',
      request,
      metadata || {},
      methodDescriptor_NotificationController_List);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.notification_service.app.MarkNotificationsAsReadRequest,
 *   !proto.google.protobuf.Empty>}
 */
const methodDescriptor_NotificationController_MarkNotificationsAsRead = new grpc.web.MethodDescriptor(
  '/notification_service.app.NotificationController/MarkNotificationsAsRead',
  grpc.web.MethodType.UNARY,
  proto.notification_service.app.MarkNotificationsAsReadRequest,
  google_protobuf_empty_pb.Empty,
  /**
   * @param {!proto.notification_service.app.MarkNotificationsAsReadRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  google_protobuf_empty_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.notification_service.app.MarkNotificationsAsReadRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.google.protobuf.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.notification_service.app.NotificationControllerClient.prototype.markNotificationsAsRead =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/notification_service.app.NotificationController/MarkNotificationsAsRead',
      request,
      metadata || {},
      methodDescriptor_NotificationController_MarkNotificationsAsRead,
      callback);
};


/**
 * @param {!proto.notification_service.app.MarkNotificationsAsReadRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.google.protobuf.Empty>}
 *     Promise that resolves to the response
 */
proto.notification_service.app.NotificationControllerPromiseClient.prototype.markNotificationsAsRead =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/notification_service.app.NotificationController/MarkNotificationsAsRead',
      request,
      metadata || {},
      methodDescriptor_NotificationController_MarkNotificationsAsRead);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.notification_service.app.NotificationPartialUpdateRequest,
 *   !proto.notification_service.app.NotificationResponse>}
 */
const methodDescriptor_NotificationController_PartialUpdate = new grpc.web.MethodDescriptor(
  '/notification_service.app.NotificationController/PartialUpdate',
  grpc.web.MethodType.UNARY,
  proto.notification_service.app.NotificationPartialUpdateRequest,
  proto.notification_service.app.NotificationResponse,
  /**
   * @param {!proto.notification_service.app.NotificationPartialUpdateRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.notification_service.app.NotificationResponse.deserializeBinary
);


/**
 * @param {!proto.notification_service.app.NotificationPartialUpdateRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.notification_service.app.NotificationResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.notification_service.app.NotificationResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.notification_service.app.NotificationControllerClient.prototype.partialUpdate =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/notification_service.app.NotificationController/PartialUpdate',
      request,
      metadata || {},
      methodDescriptor_NotificationController_PartialUpdate,
      callback);
};


/**
 * @param {!proto.notification_service.app.NotificationPartialUpdateRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.notification_service.app.NotificationResponse>}
 *     Promise that resolves to the response
 */
proto.notification_service.app.NotificationControllerPromiseClient.prototype.partialUpdate =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/notification_service.app.NotificationController/PartialUpdate',
      request,
      metadata || {},
      methodDescriptor_NotificationController_PartialUpdate);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.notification_service.app.NotificationRetrieveRequest,
 *   !proto.notification_service.app.NotificationResponse>}
 */
const methodDescriptor_NotificationController_Retrieve = new grpc.web.MethodDescriptor(
  '/notification_service.app.NotificationController/Retrieve',
  grpc.web.MethodType.UNARY,
  proto.notification_service.app.NotificationRetrieveRequest,
  proto.notification_service.app.NotificationResponse,
  /**
   * @param {!proto.notification_service.app.NotificationRetrieveRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.notification_service.app.NotificationResponse.deserializeBinary
);


/**
 * @param {!proto.notification_service.app.NotificationRetrieveRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.notification_service.app.NotificationResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.notification_service.app.NotificationResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.notification_service.app.NotificationControllerClient.prototype.retrieve =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/notification_service.app.NotificationController/Retrieve',
      request,
      metadata || {},
      methodDescriptor_NotificationController_Retrieve,
      callback);
};


/**
 * @param {!proto.notification_service.app.NotificationRetrieveRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.notification_service.app.NotificationResponse>}
 *     Promise that resolves to the response
 */
proto.notification_service.app.NotificationControllerPromiseClient.prototype.retrieve =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/notification_service.app.NotificationController/Retrieve',
      request,
      metadata || {},
      methodDescriptor_NotificationController_Retrieve);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.notification_service.app.NotificationRequest,
 *   !proto.notification_service.app.NotificationResponse>}
 */
const methodDescriptor_NotificationController_Update = new grpc.web.MethodDescriptor(
  '/notification_service.app.NotificationController/Update',
  grpc.web.MethodType.UNARY,
  proto.notification_service.app.NotificationRequest,
  proto.notification_service.app.NotificationResponse,
  /**
   * @param {!proto.notification_service.app.NotificationRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.notification_service.app.NotificationResponse.deserializeBinary
);


/**
 * @param {!proto.notification_service.app.NotificationRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.notification_service.app.NotificationResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.notification_service.app.NotificationResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.notification_service.app.NotificationControllerClient.prototype.update =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/notification_service.app.NotificationController/Update',
      request,
      metadata || {},
      methodDescriptor_NotificationController_Update,
      callback);
};


/**
 * @param {!proto.notification_service.app.NotificationRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.notification_service.app.NotificationResponse>}
 *     Promise that resolves to the response
 */
proto.notification_service.app.NotificationControllerPromiseClient.prototype.update =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/notification_service.app.NotificationController/Update',
      request,
      metadata || {},
      methodDescriptor_NotificationController_Update);
};


module.exports = proto.notification_service.app;

